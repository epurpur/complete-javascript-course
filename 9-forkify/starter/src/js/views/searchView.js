
import { elements } from './base';

// functions regarding the search view

export const getInput = () => elements.searchInput.value;    //implicit return for one line function


export const clearInput = () => {
	elements.searchInput.value = '';
};


export const clearResults = () => {
	elements.searchResList.innerHTML = '';  //setting HTML inside will be empty
};


const limitRecipeTitle = (title, limit=17) => {
	//limits recipe title to 17 characters
	const newTitle = [];

	if (title.length > limit) {
		title.split(' ').reduce((accumulator, current) => {   //split strings by space  ex: 'pasta with tomato and spinach'
			if (accumulator + current.length <= limit) {
				newTitle.push(current);
			}
			return accumulator + current.length;
		}, 0);   //initial value of accumulator is 0

		//return result
		return `${newTitle.join(' ')} ...`;   //joins elements of newTitle array into sentence separated by spaces   
	}

	return title;
};


const renderRecipe = recipe => {
	// rendering for each recipe actually happens here
	// template string allows us to write HTML which will be dynamically generated by javascript
	const markup = `
	<li>
	    <a class="results__link" href="#${recipe.recipe_id}">
	    	<figure class="results__fig">
	    		<img src="${recipe.image_url}" alt="${recipe.title}">
	    	</figure>
	    	<div class="results__data">
	    		<h4 class="results__name">${limitRecipeTitle(recipe.title)}</h4>
	    		<p class="results__author">${recipe.publisher}</p>
	    	</div>
	    </a>
    </li>
	`;

	elements.searchResList.insertAdjacentHTML('beforeend', markup);  //new element will be put on end of list with 'beforeend' argument
};


export const renderResults = recipes => {
	recipes.forEach(renderRecipe);  //best way to loop through array is to use forEach() built-in function
};

