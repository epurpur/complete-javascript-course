
import { elements } from './base';

// functions regarding the search view

export const getInput = () => elements.searchInput.value;    //implicit return for one line function


export const clearInput = () => {
	elements.searchInput.value = '';
};


export const clearResults = () => {
	elements.searchResList.innerHTML = '';  //setting HTML inside will be empty
	elements.searchResPages.innerHTML = '';
};


export const highlightSelected = id => {
	const resultsArr = Array.from(document.querySelectorAll('.results__link'))
	resultsArr.forEach(element => {
		element.classList.remove('results__link--active');
	});

	document.querySelector(`a[href="#${id}"]`).classList.add('results__link--active');
};


const limitRecipeTitle = (title, limit=17) => {
	//limits recipe title to 17 characters
	const newTitle = [];

	if (title.length > limit) {
		title.split(' ').reduce((accumulator, current) => {   //split strings by space  ex: 'pasta with tomato and spinach'
			if (accumulator + current.length <= limit) {
				newTitle.push(current);
			}
			return accumulator + current.length;
		}, 0);   //initial value of accumulator is 0

		//return result
		return `${newTitle.join(' ')} ...`;   //joins elements of newTitle array into sentence separated by spaces   
	}

	return title;
};


const renderRecipe = recipe => {
	// rendering for each recipe actually happens here
	// template string allows us to write HTML which will be dynamically generated by javascript
	const markup = `
	<li>
	    <a class="results__link" href="#${recipe.recipe_id}">
	    	<figure class="results__fig">
	    		<img src="${recipe.image_url}" alt="${recipe.title}">
	    	</figure>
	    	<div class="results__data">
	    		<h4 class="results__name">${limitRecipeTitle(recipe.title)}</h4>
	    		<p class="results__author">${recipe.publisher}</p>
	    	</div>
	    </a>
    </li>
	`;

	elements.searchResList.insertAdjacentHTML('beforeend', markup);  //new element will be put on end of list with 'beforeend' argument
};

// type: 'prev' or 'next'
const createButton = (page, type) => `
	<button class="btn-inline results__btn--${type}" data-goto=${type === 'prev' ? page - 1 : page + 1}>
		<span>Page ${type === 'prev' ? page - 1 : page + 1}</span>
        <svg class="search__icon">
        	<use href="img/icons.svg#icon-triangle-${type === 'prev' ? 'left' : 'right'}"></use>
        </svg>
                    
    </button>
`;


const renderButtons = (page, numResults, resPerPage=10) => {
	const pages = Math.ceil(numResults / resPerPage)  //rounds number up to next integer

	let button;

	if (page === 1 && pages > 1) {
		// Only button to go to next page, if there is more than 1 page. 
		button = createButton(page, 'next');
	} else if (page < pages) {
		// both next and previous button
		button = `
			${createButton(page, 'prev')}
			${createButton(page, 'next')}
		`;
	} else if (page === pages && pages > 1) {
		// Only button to previous page, if there is more than 1 page.
		button = createButton(page, 'prev');
	}

	elements.searchResPages.insertAdjacentHTML('afterbegin', button);

};


export const renderResults = (recipes, page=1, resPerPage=10) => {
	// render results of current page
	const start = (page - 1) * resPerPage;
	const end = page * resPerPage;

	recipes.slice(start, end).forEach(renderRecipe);  //best way to loop through array is to use forEach() built-in function

	//render pagination buttons
	renderButtons(page, recipes.length, resPerPage);
};


